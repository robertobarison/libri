# coding=utf-8
##############################################################################
#
#  Sito per la gestione della biblioteca personale
#  2018 Roberto Barison - roberto.barison@anche.no
#
#  SISTEMARE LA LICENZA
#
##############################################################################

"""
Django settings for librisite project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# ===========================================================================
# Application version
# Roberto 20181023
# ===========================================================================
PROJECT_NAME = 'libri'
if BASE_DIR == '/data/web/libri':
    APPLICATION = PROJECT_NAME
else:
    APPLICATION = PROJECT_NAME + '_dev'
VERSION = '0'
RELEASE = '1'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!4u^70^ubqwrb#=*%li9_@qnm$zop0tk6k3#a-n1xw2m4fh%gg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'librisite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'librisite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# ===========================================================================
# Database sqlite3
# Roberto 20181023
# ===========================================================================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, '../db', 'libri.sqlite3'),
        'ATOMIC_REQUEST': True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# ===========================================================================
# Lingua italiana in Italia
# Roberto 20181023
# ===========================================================================
LANGUAGE_CODE = 'it-IT'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# ===========================================================================
# Static root
# Roberto 20181023
# ===========================================================================
STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "../static")


# ===========================================================================
# Configurazione log
# Roberto 20181023
# ===========================================================================

LOG_FILE_MAX_SIZE = 1024 * 1024 * 5  # 5 MB
LOG_FILE_NUM = 5

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'message': {
            'format': '%(asctime)s [ %(levelname)8s ] version=' + VERSION + ' release=' + RELEASE + ' pyname="%(pathname)s"'
            ' lineno=%(lineno)d module="%(module)s" process=%(process)d thread=%(thread)d function="%(funcName)s" %(message)s'
        },
        'init': {
            'format': '%(asctime)s [ %(levelname)8s ] version=' + VERSION + ' release=' + RELEASE + ' pyname="%(pathname)s"'
            ' lineno=%(lineno)d module="%(module)s" process=%(process)d thread=%(thread)d function="%(funcName)s" %(message)s'
        },
        'audit': {
            'format': '%(asctime)s [ %(levelname)8s ] version=' + VERSION + ' release=' + RELEASE + ' pyname="%(pathname)s"'
            ' lineno=%(lineno)d module="%(module)s" process=%(process)d thread=%(thread)d function="%(funcName)s" %(message)s'
        },
        'error': {
            'format': '%(asctime)s [ %(levelname)8s ] version=' + VERSION + ' release=' + RELEASE + ' pyname="%(pathname)s"'
            ' lineno=%(lineno)d module="%(module)s" process=%(process)d thread=%(thread)d function="%(funcName)s" %(message)s'
        },
        'click': {
            'format': '%(asctime)s;%(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'log.access': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../log', PROJECT_NAME + '_access.log'),
            'maxBytes': LOG_FILE_MAX_SIZE,
            'backupCount': LOG_FILE_NUM,
            'formatter': 'message',
        },
        'log.init': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../log', PROJECT_NAME + '_init.log'),
            'maxBytes': LOG_FILE_MAX_SIZE,
            'backupCount': LOG_FILE_NUM,
            'formatter': 'init',
        },
        'log.audit': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../log', PROJECT_NAME + '_audit.log'),
            'maxBytes': LOG_FILE_MAX_SIZE,
            'backupCount': LOG_FILE_NUM,
            'formatter': 'audit',
        },
        'log.error': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../log', PROJECT_NAME + '_error.log'),
            'maxBytes': LOG_FILE_MAX_SIZE,
            'backupCount': LOG_FILE_NUM,
            'formatter': 'error',
        },
        'log.click': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, '../log', PROJECT_NAME + '_click.log'),
            'maxBytes': LOG_FILE_MAX_SIZE,
            'backupCount': LOG_FILE_NUM,
            'formatter': 'click',
        },
    },
    'loggers': {
        'log.access': {
            'handlers': ['log.access'],
            'level': 'DEBUG',
            'propagate': True,
        },

        'log.init': {
            'handlers': ['log.init'],
            'level': 'DEBUG',
            'propagate': True,
        },

        'log.audit': {
            'handlers': ['log.audit'],
            'level': 'INFO',
            'propagate': True,
        },

        'log.error': {
            'handlers': ['log.error'],
            'level': 'DEBUG',
            'propagate': True,
        },

        'log.click': {
            'handlers': ['log.click'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# eof
